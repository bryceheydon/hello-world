{
	"name": "DF_GOLD_EVENT_TABLE_LOAD",
	"properties": {
		"folder": {
			"name": "OEC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_EAAS_SQL_SERVER_CONNECTION",
						"type": "LinkedServiceReference"
					},
					"name": "TxApplication"
				},
				{
					"dataset": {
						"referenceName": "DS_EAAS_GOLD_AUTHORIZED_REP",
						"type": "DatasetReference"
					},
					"name": "RefAuth"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_EAAS_GOLD_AUTHORIZED_REP",
						"type": "DatasetReference"
					},
					"name": "AuthRep"
				},
				{
					"dataset": {
						"referenceName": "DS_EAAS_GOLD_BROKER_EVENT",
						"type": "DatasetReference"
					},
					"name": "Broker"
				},
				{
					"dataset": {
						"referenceName": "DS_EAAS_GOLD_PCP_EVENT",
						"type": "DatasetReference"
					},
					"name": "PCP"
				},
				{
					"dataset": {
						"referenceName": "DS_OEF_GOLD_4RX_EVENTS",
						"type": "DatasetReference"
					},
					"name": "GOLD4RxLOAD"
				},
				{
					"dataset": {
						"referenceName": "GOLD_MEMBERS_ENROLLMENT_CHANGE_HISTORY",
						"type": "DatasetReference"
					},
					"name": "GoldEnrollChangeHist"
				}
			],
			"transformations": [
				{
					"name": "SelPCP"
				},
				{
					"name": "SelBroker"
				},
				{
					"name": "SelAuthRep"
				},
				{
					"name": "Sel4rx"
				},
				{
					"name": "SelEnrollmentHistory"
				},
				{
					"name": "split1"
				},
				{
					"name": "split2"
				},
				{
					"name": "ContractIdFilter"
				},
				{
					"name": "JnAuth"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FileName as string (\"FBHP_Eaas_Export_20221014081550.txt\"),",
				"     BlobContainer as string (\"eaas-container\"),",
				"     BlobProcessingTemp as string (\"oec/processing/temp\")",
				"}",
				"source(output(",
				"          GOLD_MEMBER_ID as long,",
				"          CONTRACT_ID as string,",
				"          AUTHORIZED_REP_FIRST_NAME as string,",
				"          AUTHORIZED_REP_MIDDLE_INT as string,",
				"          AUTHORIZED_REP_LAST_NAME as string,",
				"          AUTHORIZED_REP_ADDRESS as string,",
				"          AUTHORIZED_REP_CITY as string,",
				"          AUTHORIZED_REP_STATE as string,",
				"          AUTHORIZED_REP_ZIP as string,",
				"          AUTHORIZED_REP_RELATIONSHIP_ID as string,",
				"          AUTHORIZED_REP_PHONE as string,",
				"          AGENT_ID as string,",
				"          BROKER_ID as string,",
				"          BROKER_FIRST_NAME as string,",
				"          BROKER_LAST_NAME as string,",
				"          BROKER_ADDRESSLINE1 as string,",
				"          BROKER_ADDRESSLINE2 as string,",
				"          BROKER_CITY as string,",
				"          BROKER_STATE as string,",
				"          BROKER_ZIP_CODE as string,",
				"          BROKER_VALID as string,",
				"          BROKER_ERROR as string,",
				"          PCP_PROVIDER_ID as string,",
				"          PCP_PROVIDER_NAME as string,",
				"          PBP_NUMBER as string,",
				"          ELECTION_TYPE_CODE as string,",
				"          CONTRACT_NUMBER as string,",
				"          DISENROLLMENT_REASON_CODE as string,",
				"          ENROLLMENT_EFFECTIVE_DATE as timestamp,",
				"          EFFECTIVE_DATE_DISENROLLMENT as timestamp,",
				"          SEGMENT_ID as string,",
				"          EGHP_FLAG as string,",
				"          SOURCE_TYPE_CODE as string,",
				"          PART_D_RX_BIN as string,",
				"          PART_D_RX_PCN as string,",
				"          PART_D_RX_GROUP as string,",
				"          PART_D_RX_ID as string,",
				"          SECONDARY_DRUG_INS_FLAG as string,",
				"          SECONDARY_DRUG_BIN as string,",
				"          SECONDARY_DRUG_PCN as string,",
				"          SECONDARY_RX_ID as string,",
				"          SECONDARY_RX_GROUP as string,",
				"          PRODUCT_ID as string,",
				"          PRODUCT_CLASS as string,",
				"          PRODUCT_GROUP as string,",
				"          PRODUCT_SUBGROUP as string,",
				"          APPLICATION_ID as long,",
				"          MAINTENANCE_CODE as string,",
				"          GOLD_MEMBER_STATUS_ID as integer,",
				"          UPDATED_BY as string,",
				"          CREATED_ON as timestamp,",
				"          UPDATED_ON as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: (\"SELECT GOLD_MEMBER_ID,AP.CONTRACT_ID,AP.AUTHORIZED_REP_FIRST_NAME,AP.AUTHORIZED_REP_MIDDLE_INT,AP.AUTHORIZED_REP_LAST_NAME,AP.AUTHORIZED_REP_ADDRESS,AP.AUTHORIZED_REP_CITY,AP.AUTHORIZED_REP_STATE,AP.AUTHORIZED_REP_ZIP,AP.AUTHORIZED_REP_RELATIONSHIP_ID,AP.AUTHORIZED_REP_PHONE,AP.AGENT_ID,AP.BROKER_ID,AP.BROKER_FIRST_NAME,AP.BROKER_LAST_NAME,AP.BROKER_ADDRESSLINE1,AP.BROKER_ADDRESSLINE2,AP.BROKER_CITY,AP.BROKER_STATE,AP.BROKER_ZIP_CODE,AP.BROKER_VALID,AP.BROKER_ERROR,AP.PCPID AS PCP_PROVIDER_ID,AP.PCP AS PCP_PROVIDER_NAME,GLD.PBP_NUMBER,GLD.ELECTION_TYPE_CODE,AP.CONTRACT_ID AS CONTRACT_NUMBER,GLD.DISENROLLMENT_REASON_CODE,GLD.ENROLLMENT_EFFECTIVE_DATE,GLD.EFFECTIVE_DATE_DISENROLLMENT,AP.SEGMENT_ID,GLD.EGHP_FLAG,GLD.SOURCE_TYPE_CODE,GLD.PART_D_RX_BIN,GLD.PART_D_RX_PCN,GLD.PART_D_RX_GROUP,AP.SUBSCRIBER_ID AS PART_D_RX_ID,GLD.SECONDARY_DRUG_INS_FLAG,GLD.SECONDARY_DRUG_BIN,GLD.SECONDARY_DRUG_PCN,GLD.SECONDARY_RX_ID,GLD.SECONDARY_RX_GROUP,GLD.PRODUCT_ID,GLD.PRODUCT_CLASS,GLD.PRODUCT_GROUP,GLD.PRODUCT_SUBGROUP,GLD.APPLICATION_ID,GLD.MAINTENANCE_CODE,CASE WHEN CHARINDEX(',',AP.SEP_REASON_CODE)!=0 THEN GLD.GOLD_MEMBER_STATUS_ID ELSE NULL END AS GOLD_MEMBER_STATUS_ID,'ETL' AS UPDATED_BY,getdate() as CREATED_ON,getdate() as UPDATED_ON FROM [dbo].[TX_APPLICATION] AP INNER JOIN [dbo].[GOLD_MEMBER] GLD ON AP.SUBSCRIBER_ID=GLD.SUBSCRIBER_ID AND AP.APPLICATION_ID=GLD.APPLICATION_ID INNER JOIN [dbo].[TX_FILE] FL ON FL.FILE_ID=AP.FILE_ID WHERE trim(FL.FILE_NAME) = '\"+$FileName+\"'\"),",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> TxApplication",
				"source(output(",
				"          REF_AUTHORIZED_REP_RELATIONSHIP_ID as integer,",
				"          REF_AUTHORIZED_REP_RELATIONSHIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT AUTHORIZED_REP_RELATIONSHIP_ID AS REF_AUTHORIZED_REP_RELATIONSHIP_ID,AUTHORIZED_REP_RELATIONSHIP_CODE AS REF_AUTHORIZED_REP_RELATIONSHIP_CODE FROM [dbo].[REF_AUTHORIZED_REP_RELATIONSHIP]',",
				"     format: 'query') ~> RefAuth",
				"TxApplication select(mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          PCP_PROVIDER_ID,",
				"          PCP_PROVIDER_NAME,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          APPLICATION_ID,",
				"          CONTRACT_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelPCP",
				"TxApplication select(mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          AGENT_ID,",
				"          BROKER_ID,",
				"          BROKER_FIRST_NAME,",
				"          BROKER_LAST_NAME,",
				"          BROKER_ADDRESSLINE1,",
				"          BROKER_ADDRESSLINE2,",
				"          BROKER_CITY,",
				"          BROKER_STATE,",
				"          BROKER_ZIP_CODE,",
				"          BROKER_VALID,",
				"          BROKER_ERROR,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          APPLICATION_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelBroker",
				"TxApplication select(mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          AUTHORIZED_REP_FIRST_NAME,",
				"          AUTHORIZED_REP_MIDDLE_INT,",
				"          AUTHORIZED_REP_LAST_NAME,",
				"          AUTHORIZED_REP_ADDRESS,",
				"          AUTHORIZED_REP_CITY,",
				"          AUTHORIZED_REP_STATE,",
				"          AUTHORIZED_REP_ZIP,",
				"          AUTHORIZED_REP_RELATIONSHIP_ID,",
				"          AUTHORIZED_REP_PHONE,",
				"          UPDATED_BY,",
				"          APPLICATION_ID,",
				"          CREATED_ON,",
				"          UPDATED_ON",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelAuthRep",
				"TxApplication select(mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          CONTRACT_ID,",
				"          AUTHORIZED_REP_FIRST_NAME,",
				"          AUTHORIZED_REP_MIDDLE_INT,",
				"          AUTHORIZED_REP_LAST_NAME,",
				"          AUTHORIZED_REP_ADDRESS,",
				"          AUTHORIZED_REP_CITY,",
				"          AUTHORIZED_REP_STATE,",
				"          AUTHORIZED_REP_ZIP,",
				"          AUTHORIZED_REP_RELATIONSHIP_ID,",
				"          AUTHORIZED_REP_PHONE,",
				"          AGENT_ID,",
				"          BROKER_ID,",
				"          BROKER_FIRST_NAME,",
				"          BROKER_LAST_NAME,",
				"          BROKER_ADDRESSLINE1,",
				"          BROKER_ADDRESSLINE2,",
				"          BROKER_CITY,",
				"          BROKER_STATE,",
				"          BROKER_ZIP_CODE,",
				"          BROKER_VALID,",
				"          BROKER_ERROR,",
				"          PCP_PROVIDER_ID,",
				"          PCP_PROVIDER_NAME,",
				"          PBP_NUMBER,",
				"          ELECTION_TYPE_CODE,",
				"          CONTRACT_NUMBER,",
				"          DISENROLLMENT_REASON_CODE,",
				"          ENROLLMENT_EFFECTIVE_DATE,",
				"          EFFECTIVE_DATE_DISENROLLMENT,",
				"          SEGMENT_ID,",
				"          EGHP_FLAG,",
				"          SOURCE_TYPE_CODE,",
				"          PART_D_RX_BIN,",
				"          PART_D_RX_PCN,",
				"          PART_D_RX_GROUP,",
				"          PART_D_RX_ID,",
				"          SECONDARY_DRUG_INS_FLAG,",
				"          SECONDARY_DRUG_BIN,",
				"          SECONDARY_DRUG_PCN,",
				"          SECONDARY_RX_ID,",
				"          SECONDARY_RX_GROUP,",
				"          PRODUCT_ID,",
				"          PRODUCT_CLASS,",
				"          PRODUCT_GROUP,",
				"          PRODUCT_SUBGROUP,",
				"          APPLICATION_ID,",
				"          MAINTENANCE_CODE,",
				"          GOLD_MEMBER_STATUS_ID,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Sel4rx",
				"TxApplication select(mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          PBP_NUMBER,",
				"          ELECTION_TYPE_CODE,",
				"          CONTRACT_NUMBER,",
				"          DISENROLLMENT_REASON_CODE,",
				"          ENROLLMENT_EFFECTIVE_DATE,",
				"          EFFECTIVE_DATE_DISENROLLMENT,",
				"          SEGMENT_ID,",
				"          EGHP_FLAG,",
				"          SOURCE_TYPE_CODE,",
				"          PART_D_RX_BIN,",
				"          PART_D_RX_PCN,",
				"          PART_D_RX_GROUP,",
				"          PART_D_RX_ID,",
				"          SECONDARY_DRUG_INS_FLAG,",
				"          SECONDARY_DRUG_BIN,",
				"          SECONDARY_DRUG_PCN,",
				"          SECONDARY_RX_ID,",
				"          SECONDARY_RX_GROUP,",
				"          PRODUCT_ID,",
				"          PRODUCT_CLASS,",
				"          PRODUCT_GROUP,",
				"          PRODUCT_SUBGROUP,",
				"          APPLICATION_ID,",
				"          MAINTENANCE_CODE,",
				"          GOLD_MEMBER_STATUS_ID,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelEnrollmentHistory",
				"select1 split(not(isNull(AUTHORIZED_REP_FIRST_NAME)),",
				"     disjoint: false) ~> split1@(AuthCheck, NoAuth)",
				"SelBroker split(not(isNull(BROKER_ID)),",
				"     disjoint: false) ~> split2@(BrokerChk, NoBroker)",
				"SelPCP filter(substring(CONTRACT_ID,1,1)=='H') ~> ContractIdFilter",
				"SelAuthRep, RefAuth join(AUTHORIZED_REP_RELATIONSHIP_ID == REF_AUTHORIZED_REP_RELATIONSHIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JnAuth",
				"JnAuth select(mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          AUTHORIZED_REP_FIRST_NAME,",
				"          AUTHORIZED_REP_MIDDLE_INT,",
				"          AUTHORIZED_REP_LAST_NAME,",
				"          AUTHORIZED_REP_ADDRESS,",
				"          AUTHORIZED_REP_CITY,",
				"          AUTHORIZED_REP_STATE,",
				"          AUTHORIZED_REP_ZIP,",
				"          AUTHORIZED_REP_RELATIONSHIP_ID = REF_AUTHORIZED_REP_RELATIONSHIP_ID,",
				"          AUTHORIZED_REP_PHONE,",
				"          UPDATED_BY,",
				"          APPLICATION_ID,",
				"          CREATED_ON,",
				"          UPDATED_ON",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"split1@AuthCheck sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GOLD_AUTHORIZED_REP_ID as long,",
				"          GOLD_MEMBER_ID as long,",
				"          AUTHORIZED_REP_FIRST_NAME as string,",
				"          AUTHORIZED_REP_MIDDLE_NAME as string,",
				"          AUTHORIZED_REP_LAST_NAME as string,",
				"          AUTHORIZED_REP_ADDRESS as string,",
				"          AUTHORIZED_REP_CITY as string,",
				"          AUTHORIZED_REP_STATE as string,",
				"          AUTHORIZED_REP_ZIP as string,",
				"          AUTHORIZED_REP_DOB as timestamp,",
				"          AUTHORIZED_REP_GENDER as string,",
				"          AUTHORIZED_REP_RELATIONSHIP_ID as string,",
				"          AUTHORIZED_REP_PHONE as string,",
				"          AUTHORIZED_REP_EMAIL_ADDR as string,",
				"          AUTHORIZED_REP_RECEIVED_DATE as timestamp,",
				"          AUTHORIZED_REP_EFFECTIVE_DATE as timestamp,",
				"          AUTHORIZED_REP_EXPIRE_DATE as timestamp,",
				"          AUTHORIZED_REP_TERM_REASON as string,",
				"          AUTHORIZED_REP_STATUS as string,",
				"          AUTHORIZED_REP_DOCTYPE_ID as string,",
				"          UPDATED_BY as string,",
				"          CREATED_ON as timestamp,",
				"          UPDATED_ON as timestamp,",
				"          UID as string,",
				"          AUTHORIZED_REP_TERM_REASON_ID as integer,",
				"          APPLICATION_ID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          AUTHORIZED_REP_FIRST_NAME,",
				"          AUTHORIZED_REP_MIDDLE_NAME = AUTHORIZED_REP_MIDDLE_INT,",
				"          AUTHORIZED_REP_LAST_NAME,",
				"          AUTHORIZED_REP_ADDRESS,",
				"          AUTHORIZED_REP_CITY,",
				"          AUTHORIZED_REP_STATE,",
				"          AUTHORIZED_REP_ZIP,",
				"          AUTHORIZED_REP_RELATIONSHIP_ID,",
				"          AUTHORIZED_REP_PHONE,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          APPLICATION_ID",
				"     )) ~> AuthRep",
				"split2@BrokerChk sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GOLD_BROKER_ID as long,",
				"          GOLD_MEMBER_ID as long,",
				"          AGENT_ID as string,",
				"          BROKER_ID as string,",
				"          BROKER_FIRST_NAME as string,",
				"          BROKER_LAST_NAME as string,",
				"          BROKER_ADDR_LINE1 as string,",
				"          BROKER_ADDR_LINE2 as string,",
				"          BROKER_CITY as string,",
				"          BROKER_STATE as string,",
				"          BROKER_ZIP as string,",
				"          BROKER_EFFECTIVE_DATE as timestamp,",
				"          BROKER_END_DATE as timestamp,",
				"          BROKER_STATUS as string,",
				"          UPDATED_BY as string,",
				"          CREATED_ON as timestamp,",
				"          UPDATED_ON as timestamp,",
				"          UID as string,",
				"          APPLICATION_ID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          AGENT_ID,",
				"          BROKER_ID,",
				"          BROKER_FIRST_NAME,",
				"          BROKER_LAST_NAME,",
				"          BROKER_ADDR_LINE1 = BROKER_ADDRESSLINE1,",
				"          BROKER_ADDR_LINE2 = BROKER_ADDRESSLINE2,",
				"          BROKER_CITY,",
				"          BROKER_STATE,",
				"          BROKER_ZIP = BROKER_ZIP_CODE,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          APPLICATION_ID",
				"     )) ~> Broker",
				"ContractIdFilter sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GOLD_PCP_ID as long,",
				"          GOLD_MEMBER_ID as long,",
				"          PCP_PROVIDER_ID as string,",
				"          PCP_NPI as string,",
				"          PCP_PROVIDER_NAME as string,",
				"          PCP_START_DATE as timestamp,",
				"          PCP_END_DATE as timestamp,",
				"          PCP_STATUS as string,",
				"          PCP_CHANGE_REASON as string,",
				"          UPDATED_BY as string,",
				"          CREATED_ON as timestamp,",
				"          UPDATED_ON as timestamp,",
				"          UID as string,",
				"          APPLICATION_ID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          PCP_PROVIDER_ID,",
				"          PCP_PROVIDER_NAME,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          APPLICATION_ID",
				"     )) ~> PCP",
				"Sel4rx sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GOLD_4RX_EVENTS_ID as long,",
				"          GOLD_MEMBER_ID as long,",
				"          PART_D_RX_EFFECTIVE_DATE as timestamp,",
				"          PART_D_RX_END_DATE as timestamp,",
				"          PART_D_RX_ID as string,",
				"          PART_D_RX_BIN as string,",
				"          PART_D_RX_PCN as string,",
				"          PART_D_RX_GROUP as string,",
				"          SECONDARY_DRUG_INS_FLAG as string,",
				"          SECONDARY_RX_ID as string,",
				"          SECONDARY_RX_GROUP as string,",
				"          SECONDARY_DRUG_BIN as string,",
				"          SECONDARY_DRUG_PCN as string,",
				"          UPDATED_BY as string,",
				"          CREATED_ON as timestamp,",
				"          UPDATED_ON as timestamp,",
				"          UID as string,",
				"          APPLICATION_ID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          PART_D_RX_EFFECTIVE_DATE = ENROLLMENT_EFFECTIVE_DATE,",
				"          PART_D_RX_END_DATE = EFFECTIVE_DATE_DISENROLLMENT,",
				"          PART_D_RX_ID,",
				"          PART_D_RX_BIN,",
				"          PART_D_RX_PCN,",
				"          PART_D_RX_GROUP,",
				"          SECONDARY_DRUG_INS_FLAG,",
				"          SECONDARY_RX_ID,",
				"          SECONDARY_RX_GROUP,",
				"          SECONDARY_DRUG_BIN,",
				"          SECONDARY_DRUG_PCN,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          APPLICATION_ID",
				"     )) ~> GOLD4RxLOAD",
				"SelEnrollmentHistory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          GOLD_MEMBERS_ENROLLMENT_CHANGE_HISTORY_ID as long,",
				"          GOLD_MEMBER_ID as long,",
				"          ENROLLMENT_EFFECTIVE_DATE as timestamp,",
				"          EFFECTIVE_DATE_DISENROLLMENT as timestamp,",
				"          DISENROLLMENT_REASON_CODE as string,",
				"          PBP_NUMBER as string,",
				"          PRODUCT_ID as string,",
				"          PRODUCT_CLASS as string,",
				"          PRODUCT_GROUP as string,",
				"          PRODUCT_SUBGROUP as string,",
				"          PRODUCT_TYPE_ID as string,",
				"          CONTRACT_NUMBER as string,",
				"          PRODUCT_PLAN_ID as string,",
				"          SEGMENT_ID as string,",
				"          ELECTION_TYPE_CODE as string,",
				"          SOURCE_TYPE_CODE as string,",
				"          EGHP_FLAG as string,",
				"          UPDATED_BY as string,",
				"          CREATED_ON as timestamp,",
				"          UPDATED_ON as timestamp,",
				"          UID as string,",
				"          GOLD_MEMBER_STATUS_ID as integer,",
				"          MAINTENANCE_CODE as string,",
				"          APPLICATION_ID as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GOLD_MEMBER_ID,",
				"          ENROLLMENT_EFFECTIVE_DATE,",
				"          EFFECTIVE_DATE_DISENROLLMENT,",
				"          DISENROLLMENT_REASON_CODE,",
				"          PBP_NUMBER,",
				"          PRODUCT_ID,",
				"          PRODUCT_CLASS,",
				"          PRODUCT_GROUP,",
				"          PRODUCT_SUBGROUP,",
				"          CONTRACT_NUMBER,",
				"          SEGMENT_ID,",
				"          ELECTION_TYPE_CODE,",
				"          SOURCE_TYPE_CODE,",
				"          EGHP_FLAG,",
				"          UPDATED_BY,",
				"          CREATED_ON,",
				"          UPDATED_ON,",
				"          MAINTENANCE_CODE,",
				"          APPLICATION_ID,",
				"          GOLD_MEMBER_STATUS_ID",
				"     )) ~> GoldEnrollChangeHist"
			]
		}
	}
}